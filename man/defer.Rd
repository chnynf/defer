% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packaging.R
\name{defer}
\alias{defer}
\alias{defer_}
\alias{is_deferred}
\title{Defer function execution.}
\usage{
defer(entry, ..., .dots, .extract = TRUE)

defer_(entry, ..., .dots = list(), .extract = FALSE)

is_deferred(x)
}
\arguments{
\item{entry}{Entry-point function.}

\item{...}{List of dependencies, functions and variables.}

\item{.extract}{Whether to analyze functions and extract dependencies
from their code.}

\item{x}{Object to be tested.}
}
\value{
A \code{deferred} function object.

\code{TRUE} or \code{FALSE}.
}
\description{
Both \code{defer} and \code{defer_} create an execution package
(wrapper) for any user-provided function.

\code{defer_} is intended for non-interactive use. It
provides an interface very similar to \code{defer} but by default
turns off discovering dependencies (\code{.extract} is \code{FALSE}).

\code{is_deferred} verifies if the given object
is a \code{deferred} function wrapper.
}
\details{
\code{defer} is intended for interactive use - it assumes that
dependencies should be extracted (\code{.extract} defaults to
\code{TRUE}).
}
